{%- set schemaName = p.meta.destination.schemaName -%}
{%- set tableName = p.meta.destination.tableName -%}
{%- set columns = p.meta.destination.columns -%}
{%- set columnsPK = p.meta.destination.columnsPK -%}
{%- set columnsAll = p.meta.destination.columnsAll -%}
{%- set srcSchemaName = p.meta.source.table.schemaName -%}
{%- set srcTableName = p.meta.source.table.tableName -%}
{%- set query = p.meta.source.query -%}
{%- set srcTables = p.meta.source.sourceTables -%}
{%- set srcColumns = p.meta.source.columns -%}
{%- set srcColumnsPK = p.meta.source.columnsPK -%}
{%- set objectName = p.meta.object.name -%}
{%- set spSchema = p.meta.object.spSchema -%}
{%- set spName = p.meta.object.spName -%}
{%- set integers = ['int', 'integer', 'bigint', 'smallint', 'tinyint'] -%}
{%- set numbers = ['numeric', 'decimal'] -%}
{%- set strings = ['varchar', 'nvarchar', 'char', 'nchar'] -%}
{%- set dates = ['date'] -%}
{%- set times = ['time'] -%}
{%- set datetimes = ['datetime'] -%}
{%- set largeObjects = ['varchar', 'nvarchar', 'varbinary'] -%}
{%- set skColumnName = p.meta.object.name+'Key' -%}
IF OBJECT_ID ('[{{spSchema}}].[{{spName}}]', 'P') IS NOT NULL DROP PROCEDURE [{{spSchema}}].[{{spName}}];
GO

CREATE PROCEDURE [{{spSchema}}].[{{spName}}]
    @sessionNo varchar(50),
    @packageName varchar(100),
    @dwHistoryDate datetime
AS
-- ********** Project: {{ p.settings.projectName }} **********
-- Git FileName: {{ p.template.outputFileName }}
-- Fetch {% if query %} SQL query {%- else -%} [{{srcSchemaName}}].[{{srcTableName}}]{%- endif %} into datamart  unchanging or static (UCD) dimension table [{{schemaName}}].[{{tableName}}]
-- Dimensions values are static and will not change if loaded once
-- 
-- Use existing PK provided with the source query
-- 'Unknown' row needs to be a part of the source query (if necessary)
--
-- Execution sample:
-- EXEC [{{spSchema}}].[{{spName}}] 'adminSession', 'ETL', NULL 
-- 
-- Author: {{ p.settings.author }}
-- Created: {{ p.template.createdAt | dateFormat('YYYY-MM-DD hh:mm:ss a') }}
-- Modified: {{ p.settings.authorInitials }} {{ p.template.createdAt | dateFormat('YYYY-MM-DD hh:mm:ss a') }}
-- 
-- HISTORY:
-- PR     	Date      	By	Comments
-- ----   	----------	---	---------------------------------------------------------
--
SET NOCOUNT ON;
DECLARE @rowsRead INT, @rowsWritten INT
DECLARE @message varchar(1000)
DECLARE @sessionStatus varchar(50)

DECLARE @domainCode varchar(10) = '{{spSchema}}' -- define domain name in LOWER CASE
DECLARE @systemCode varchar(10) = 'ALL' -- define what system source/ALL used in this sproc
DECLARE @objectCode varchar(250) = '{{schemaName}}.{{tableName}}' -- define destination object code 
DECLARE @procName varchar(250)   = '{{schemaName}}.sp{{tableName}}' -- current proc name - OBJECT_NAME(@@PROCID) is not yet supported

DECLARE @now datetime = getUtcDate()
DECLARE @nowNZ datetime = reference.getLocalDate(@now, 'NZ')
SET @dwHistoryDate = isNull(@dwHistoryDate, @now)

-- read datamart settings
DECLARE @settings nvarchar(max) = reference.getMartParams(@domainCode, @now, @sessionNo, @objectCode)
DECLARE @dwInitialDate datetime = CAST(JSON_VALUE(@settings, '$.dwInitialDate') as datetime)
DECLARE @dwEndDate datetime = CAST(JSON_VALUE(@settings, '$.dwEndDate') as datetime)
DECLARE @dwCurrentDate datetime = CAST(JSON_VALUE(@settings, '$.dwCurrentDate') as datetime)
DECLARE @separator nvarchar(2) = JSON_VALUE(@settings, '$.separator')
DECLARE @version nvarchar(10) = JSON_VALUE(@settings, '$.version')
DECLARE @loadType nvarchar(10) = JSON_VALUE(@settings, '$.loadType')
PRINT @settings
EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @settings

PRINT replicate('-', 20) + ' EXECUTE [' + @procName + '] ' + replicate('-', 20)
EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, 'Start Execution'

-- add all manual dependencies here
DECLARE @dependencyList varchar(1000) = NULL 
{% if srcTables %}
{%- for srcTable in srcTables -%}
-- EXEC [etl].[addDependency] @sessionNo, @packageName, @srcObjectCode = '{{srcTable.schemaName}}.{{srcTable.tableName}}', @destObjectCode = @objectCode
{% endfor -%}
{%- else -%}
-- EXEC [etl].[addDependency] @sessionNo, @packageName, @srcObjectCode = '{{srcSchemaName}}.{{srcTableName}}', @destObjectCode = @objectCode
{%- endif %}
-- always check for session status AFTER adding new dependencies
EXEC [etl].[checkSessionStatus] @sessionNo, @packageName, @objectCode, @sessionStatus OUT

IF @sessionStatus in ('Ready', 'Failed') BEGIN 
  EXEC [etl].[setSessionStatus] @sessionNo, @packageName, @objectCode, @status = 'Running', @countRows = NULL
  BEGIN TRY
  -- ************ ETL code starts here ****************
  -- perform action

  IF OBJECT_ID('[{{schemaName}}].[{{tableName}}]', 'U') IS NULL
  BEGIN
    EXEC reference.printLine '-- Create table [{{schemaName}}].[{{tableName}}]'
    CREATE TABLE [{{schemaName}}].[{{tableName}}] (
      {%- for key in columns %}
      [{{key.name}}] [{{key.dataType}}] 
      {%- if key.dataType in strings and key.characterMaximumLength > 0 -%} ({{-key.characterMaximumLength-}})
      {%- elif key.dataType in largeObjects and (not key.characterMaximumLength or key.characterMaximumLength == -1) -%} (max)
      {%- elif key.dataType in numbers and key.numericPrecision > 0 and key.numericScale > 0 -%} ({{key.numericPrecision}},{{key.numericScale-}})
      {%- endif %} {{ "NULL" if key.isNullable else "NOT NULL"-}}
      {{- "," -}}
      {%- for pk in columnsPK -%}{%- if pk.name===key.name %} -- PK {%- endif -%}{%- endfor -%} 
      {% endfor %}
      dwSessionNo [varchar](50) NOT NULL,
      dwPackageName [varchar](100) NOT NULL,
      dwUpdateDate [datetime] NOT NULL,
      dwHash [varchar](40) NOT NULL            
    ) WITH ( DISTRIBUTION = REPLICATE, CLUSTERED INDEX ({{columnsPK[0].name}}) )
    -- EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message
  END

  {% if query %}
  EXEC reference.printLine '-- Create #src'
  IF OBJECT_ID('tempdb..#src') IS NOT NULL DROP TABLE #src
  CREATE TABLE #src WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
  {{query | safe | indent(8) }}
  {% endif %}

  EXEC reference.printLine '-- Create #stage'
  -- Create temp source table with foreign key(s)
  IF OBJECT_ID('tempdb..#stage') IS NOT NULL DROP TABLE #stage
  CREATE TABLE #stage WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
  SELECT 
    {% for key in srcColumns -%}
    [{{key.name}}] = src.[{{key.name}}],
    {%- for pk in srcColumnsPK -%}{%- if pk.name===key.name %} -- PK {%- endif -%}{%- endfor %} 
    {% endfor -%}
    dwHash = convert(char(40), hashBytes('SHA2_256', convert(nvarchar(max), 
      concat_ws(@separator, {%- for key in srcColumns -%}
          {%- if key.dataType in dates %} convert(nvarchar(100), src.[{{key.name}}], 23)
          {%- elif key.dataType in times %} convert(nvarchar(100), src.[{{key.name}}], 114)
          {%- elif key.dataType in datetimes %} convert(nvarchar(100), src.[{{key.name}}], 121)
          {%- else %} src.[{{key.name}}]
          {%- endif -%}{{-', ' if not loop.last -}} {% if (loop.index % 3) === 0 or loop.last %}
          {%- endif -%}
          {%- endfor -%}, ''))), 2)  
  FROM {% if not query %}[{{srcSchemaName}}].[{{srcTableName}}]{% else %}#src{% endif %} src


  IF (SELECT COUNT(*) FROM [{{schemaName}}].[{{tableName}}] sink) = 0 
  BEGIN
    IF @@trancount = 0 BEGIN TRANSACTION

    EXEC reference.printLine '-- Delete [{{schemaName}}].[{{tableName}}]'
    DELETE FROM [{{schemaName}}].[{{tableName}}]

    EXEC reference.printLine '-- Insert [{{schemaName}}].[{{tableName}}]'
    -- load new records
    INSERT INTO [{{schemaName}}].[{{tableName}}] ( 
      {% for key in columns -%}[{{key.name}}], {% if (loop.index % 3) === 0 or loop.last %}
      {% endif -%}{% endfor %} 
      dwSessionNo, dwPackageName, dwUpdateDate, dwHash
      )
    SELECT
      {% for key in columns -%}
      [{{key.name}}] = src.[{{key.name}}],
      {% endfor -%}
      dwSessionNo = @sessionNo,
      dwPackageName = @packageName,
      dwUpdateDate = @now,
      dwHash = src.dwHash
    FROM #stage src
  END

  -- ************ Actual Data UnitTests **************** 
  EXEC reference.printLine '-- Run Actual Data UnitTests'
  DECLARE @checkTotalQuantity varchar(250)
  DECLARE @checkQuantityPK varchar(250)
  DECLARE @checkQuantityLimit varchar(250)
  DECLARE @checkNullPK varchar(250)
  DECLARE @expectCountMin bigInt, @expectCountMax bigInt
  EXEC etl.getRowLimit @objectCode, @expectCountMin OUT, @expectCountMax OUT
  ;WITH 
      Expect as (SELECT expectCount = count(*) FROM #stage),
      Actual as (
        SELECT 
          actualCount = COUNT(1),
          actualCountPK = COUNT(DISTINCT concat_ws(@separator, {%- for key in columnsPK -%}
                {%- if key.dataType in dates %} convert(nvarchar(100), sink.[{{key.name}}], 23)
                {%- elif key.dataType in times %} convert(nvarchar(100), sink.[{{key.name}}], 114)
                {%- elif key.dataType in datetimes %} convert(nvarchar(100), sink.[{{key.name}}], 121)
                {%- else %} sink.[{{key.name}}]
                {%- endif -%}{{-', ' if not loop.last -}} {% if (loop.index % 3) === 0 or loop.last %}
                {%- endif -%}
                {%- endfor -%}, '') ),   
          actualNullPK = isNull(SUM(CASE WHEN {% for key in columnsPK -%}(sink.[{{key.name}}] is null){{-' OR ' if not loop.last -}}{%- endfor %} THEN 1 ELSE 0 END),0)
        FROM [{{schemaName}}].[{{tableName}}] sink 
        LEFT JOIN #stage src ON {% for key in columnsPK -%}sink.[{{key.name}}] = src.[{{key.name}}]{{-' AND ' if not loop.last -}}{%- endfor %}
        WHERE src.[{{columnsPK[0].name}}] IS NOT NULL
        )
  SELECT 
      @checkTotalQuantity = test.assertEqualsInt('checkTotalQuantity (source row quantity = destination)', expectCount, actualCount),
      @checkQuantityPK = test.assertEqualsInt('checkQuantityPK (source row quantity = destination PK)', expectCount, actualCountPK),
      @checkQuantityLimit = test.assertTrue(concat('checkQuantityLimit (between ', @expectCountMin, ' - ', @expectCountMax, ' rows)'), 
          CASE WHEN actualCount BETWEEN @expectCountMin and @expectCountMax THEN 'TRUE' ELSE 'FALSE' END),
      @checkNullPK = test.assertEqualsInt('checkNullPK (PK has NULL values)', 0, actualNullPK),
      @rowsRead = expectCount, @rowsWritten = actualCount
  FROM Actual CROSS JOIN Expect

  -- Info
  PRINT @checkTotalQuantity
  PRINT @checkQuantityPK
  PRINT @checkQuantityLimit
  
  EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkTotalQuantity
  EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkQuantityPK
  EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkQuantityLimit

  -- Raise Errors
  IF @@trancount>0 AND @sessionNo = 'testSession' COMMIT TRANSACTION
  IF (@checkTotalQuantity like 'TEST FAILED%') RAISERROR (@checkTotalQuantity, 16, 1)
  IF (@checkQuantityPK like 'TEST FAILED%') RAISERROR (@checkQuantityPK, 16, 1)
  IF (@checkQuantityLimit like 'TEST FAILED%') RAISERROR (@checkQuantityLimit, 16, 1)
  IF (@checkNullPK like 'TEST FAILED%') RAISERROR (@checkNullPK, 16, 1)
  
  
  -- ************ ETL code ends here ****************                

  SET @sessionStatus = 'Succeeded'
  SET @message = etl.setLogMessage('Dimension', 'Transformation complete', REPLACE(REPLACE('"output":{"rowsRead":{0}, "rowsWritten":{1}}','{0}', @rowsRead),'{1}', @rowsWritten), @sessionStatus)
  EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message

  -- change object status to @sessionStatus
  EXEC [etl].[setSessionStatus] @sessionNo, @packageName, @objectCode, @status = @sessionStatus, @countRows = @rowsWritten

  IF @@trancount > 0 COMMIT TRANSACTION
  END TRY
  BEGIN CATCH
    IF @@trancount > 0 ROLLBACK TRANSACTION

    -- change object status to 'Failed'
    SET @sessionStatus = 'Failed'
    SET @message = reference.setLogMessage('Dimension', 'Execution failed', 
                reference.setErrorMessage( ERROR_NUMBER(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_MESSAGE() ),
                @sessionStatus)
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message

    EXEC [etl].[setSessionStatus] @sessionNo, @packageName, @objectCode, @status = @sessionStatus, @countRows = NULL
    RAISERROR (@message, 16, 1)
  END CATCH
END 
ELSE BEGIN -- else skip this step
  SET @message = etl.setLogMessage('Dimension', 'Skip this step', NULL, @sessionStatus)
  EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message
END
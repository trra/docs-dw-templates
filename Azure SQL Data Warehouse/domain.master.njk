{%- import 'Azure SQL Data Warehouse/macro.njk' as macro -%}
{%- set schemaName = p.meta.destination.schemaName -%}
{%- set tableName = p.meta.destination.tableName -%}
{%- set columns = p.meta.destination.columns -%}
{%- set columnsPK = p.meta.destination.columnsPK -%}
{%- set srcSchemaName = p.meta.source.table.schemaName -%}
{%- set srcTableName = p.meta.source.table.tableName -%}
{%- set query = p.meta.source.query -%}
{%- set srcTables = p.meta.source.sourceTables -%}
{%- set srcColumns = p.meta.source.columns -%}
{%- set srcColumnsPK = p.meta.source.columnsPK -%}
{%- set objectName = p.meta.object.name -%}
{%- set spSchema = p.meta.object.spSchema -%}
{%- set spName = p.meta.object.spName -%}
{%- set integers = ['int', 'integer', 'numeric'] -%}
{%- set strings = ['varchar', 'nvarchar', 'char', 'nchar'] -%}
{%- set dates = ['date'] -%}
{%- set times = ['time'] -%}
{%- set datetimes = ['datetime'] -%}
{%- set largeObjects = ['varchar', 'nvarchar', 'varbinary'] -%}
{%- set skColumnName = p.meta.object.name+'SK' -%}
{%- set mkColumnName = p.meta.object.name+'MK' -%}
IF OBJECT_ID ('[{{spSchema}}].[{{spName}}]', 'P') IS NOT NULL DROP PROCEDURE [{{spSchema}}].[{{spName}}];
GO

CREATE PROCEDURE [{{spSchema}}].[{{spName}}]
    @sessionNo varchar(50),
    @packageName varchar(100),
    @dwHistoryDate date
AS
{{ macro.comments (p,  
  "Fetch {% if query %} SQL query {%- else -%} [{{source.table.schemaName}}].[{{source.table.tableName}}]{%- endif %} into domain master table [{{ destination.schemaName }}].[{{ destination.tableName }}]
--
-- Execution sample:
-- EXEC [{{object.spSchema}}].[{{object.spName}}] 'adminSession', 'ETL', NULL" | render(p.meta) | safe )  }}
--
SET NOCOUNT ON;
DECLARE @domainCode varchar(10) = '{{spSchema}}' -- define domain name in LOWER CASE
DECLARE @systemCode varchar(10) = 'ALL' -- define what system source/ALL used in this sproc
DECLARE @mkColumnName varchar(50) = '{{mkColumnName}}' -- mkColumnName
DECLARE @objectCode varchar(250) = '{{schemaName}}.{{tableName}}' -- define destination object code 
DECLARE @procName varchar(250)   = '{{schemaName}}.sp{{tableName}}' -- current proc name - OBJECT_NAME(@@PROCID) is not yet supported
-- read domain settings
DECLARE @dwInitialDate datetime = CAST(JSON_VALUE(reference.getDomainParams(@domainCode), '$.dwInitialDate') as datetime)
DECLARE @dwEndDate datetime = CAST(JSON_VALUE(reference.getDomainParams(@domainCode), '$.dwEndDate') as datetime)
DECLARE @separator nvarchar(2) = JSON_VALUE(reference.getDomainParams(@domainCode), '$.separator')
DECLARE @version nvarchar(10) = JSON_VALUE(reference.getDomainParams(@domainCode), '$.version')
DECLARE @loadType nvarchar(10) = JSON_VALUE(reference.getDomainParams(@domainCode), '$.loadType')
PRINT reference.getDomainParams(@domainCode)

DECLARE @now datetime = getUtcDate()
DECLARE @nowNZ datetime = reference.getLocalDate(@now, 'NZ')
SET @dwHistoryDate = isNull(@dwHistoryDate, @now)
DECLARE @sinkObjectCode varchar(250) = CASE 
  WHEN @dwHistoryDate = CAST(@now as DATE) THEN @objectCode 
  ELSE concat(@objectCode, 'History') END

DECLARE @rowsRead INT, @rowsWritten INT
DECLARE @message varchar(1000)
DECLARE @sessionStatus varchar(50)

PRINT replicate('-', 20) + ' EXECUTE [' + @procName + '] ' + replicate('-', 20)
BEGIN TRY
    -- add all manual dependencies here
    -- TODO:  JSON Array list of dependencies to check before running
    DECLARE @dependencyList varchar(1000) = NULL 
    {% if srcTables %}
    {%- for srcTable in srcTables -%}
    -- EXEC [etl].[addDependency] @sessionNo, @packageName, @srcObjectCode = '{{srcTable.schemaName}}.{{srcTable.tableName}}', @destObjectCode = @objectCode
    {% endfor -%}
    {%- else -%}
    -- EXEC [etl].[addDependency] @sessionNo, @packageName, @srcObjectCode = '{{srcSchemaName}}.{{srcTableName}}', @destObjectCode = @objectCode
    {%- endif %}
    -- always check for session status AFTER adding new dependencies
    EXEC [etl].[checkSessionStatus] @sessionNo, @packageName, @objectCode, @sessionStatus OUT

    IF @sessionStatus in ('Ready', 'Failed') BEGIN 
        EXEC [etl].[setSessionStatus] @sessionNo, @packageName, @objectCode, @status = 'Running', @countRows = NULL
        -- ************ ETL code starts here ****************
        -- perform action

        IF OBJECT_ID('[{{schemaName}}].[{{tableName}}]', 'U') IS NULL
        BEGIN
          EXEC reference.printLine 'Create table [{{schemaName}}].[{{tableName}}]'
          CREATE TABLE [{{schemaName}}].[{{tableName}}] (
              [{{skColumnName}}] [bigint] IDENTITY(1,1) NOT NULL,
              [{{mkColumnName}}] [bigint] NOT NULL,
              {%- for key in columns %}
              [{{key.name}}] [{{key.dataType}}] 
              {%- if key.characterMaximumLength > 0 -%} ({{-key.characterMaximumLength-}})
              {%- elif key.dataType in largeObjects and (not key.characterMaximumLength or key.characterMaximumLength == -1) -%} (max)
              {%- elif key.numericPrecision > 0 and key.numericScale > 0 -%} ({{key.numericPrecision}},{{key.numericScale-}})
              {%- endif %} {{ "NULL" if key.isNullable else "NOT NULL"-}}
              {{- "," -}}
              {%- for pk in columnsPK -%}{%- if pk.name===key.name %} -- PK {%- endif -%}{%- endfor -%} 
              {% endfor %}
              dwSessionNo [varchar](50) NOT NULL,
              dwPackageName [varchar](100) NOT NULL,
              dwStartDate [datetime] NOT NULL,
              dwVersion [int] NOT NULL,
              dwUpdateDate [datetime] NOT NULL,
              dwHash [varchar](40) NOT NULL
          ) WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP )
          -- EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message
        END
        IF OBJECT_ID('[{{schemaName}}].[{{tableName}}History]', 'U') IS NULL
        BEGIN
          EXEC reference.printLine 'Create table [{{schemaName}}].[{{tableName}}History]'
          CREATE TABLE [{{schemaName}}].[{{tableName}}History] (
              [{{skColumnName}}] [bigint] IDENTITY(1,1) NOT NULL,
              [{{mkColumnName}}] [bigint] NOT NULL,
              {%- for key in columns %}
              [{{key.name}}] [{{key.dataType}}] 
              {%- if key.characterMaximumLength > 0 -%} ({{-key.characterMaximumLength-}})
              {%- elif key.dataType in largeObjects and (not key.characterMaximumLength or key.characterMaximumLength == -1) -%} (max)
              {%- elif key.numericPrecision > 0 and key.numericScale > 0 -%} ({{key.numericPrecision}},{{key.numericScale-}})
              {%- endif %} {{ "NULL" if key.isNullable else "NOT NULL"-}}
              {{- "," -}}
              {%- for pk in columnsPK -%}{%- if pk.name===key.name %} -- PK {%- endif -%}{%- endfor -%} 
              {% endfor %}
              dwSessionNo [varchar](50) NOT NULL,
              dwPackageName [varchar](100) NOT NULL,
              dwIsDeleted [bit] NOT NULL,
              dwStartDate [datetime] NOT NULL,
              dwEndDate [datetime] NOT NULL,
              dwIsLastVersion [bit] NOT NULL,
              dwVersion [int] NOT NULL,
              dwUpdateDate [datetime] NOT NULL,
              dwHash [varchar](40) NOT NULL
          ) WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP )
          -- EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message
        END

        EXEC reference.printLine 'Create #busnessKeys'
        -- Create #busnessKeys temp table to generate master keys in MK Factory
        DECLARE @domainKey int = (SELECT domainKey FROM mk.[domain] WHERE [domainCode] = @domainCode and [version] = @version)

        IF OBJECT_ID('tempdb..#businessKeys') IS NOT NULL DROP TABLE #businessKeys
        CREATE TABLE #businessKeys WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
        WITH Types as (
          SELECT DISTINCT 
            systemKey, bkColumnName, bkValue, 
            [dataType] = CASE bkColumnName 
              {% for key in srcColumnsPK -%}WHEN '{{columns[loop.index0].name}}' THEN {%- if key.dataType in integers %} 'int'
              {%- elif key.dataType in strings %} 'string'
              {%- elif key.dataType in dates %} 'date'
              {%- elif key.dataType in times %} 'time'
              {%- elif key.dataType in datetimes %} 'datetime'
              {%- endif -%}{% endfor %}
              ELSE '' END,
            bkHash
          FROM (
            SELECT 
              systemKey = s.[systemKey],
              {# [CreatedOn] = convert(nvarchar(100), [CreatedOn], 121), #}
              {% for key in srcColumnsPK -%}
              [{{columns[loop.index0].name}}] = convert(nvarchar(100), src.[{{key.name}}]
              {%- if key.dataType in dates %}, 23
              {%- elif key.dataType in times %}, 114
              {%- elif key.dataType in datetimes %}, 121
              {%- endif -%}),
              {% endfor -%}
              bkHash = CONVERT(CHAR(40), hashBytes('SHA2_256', CONVERT(NVARCHAR(MAX), concat_ws(@separator, 
                src.[systemCode], {% for key in srcColumnsPK -%}src.[{{key.name}}]{{-', ' if not loop.last -}}{% endfor -%}
                ))), 2)
            FROM {% if query %}({{query | indent(12)}}) src
            {%- else -%}
            [{{srcSchemaName}}].[{{srcTableName}}] AS src
            {%- endif %} 
            JOIN mk.system s ON s.[systemCode] = src.[systemCode]
            WHERE {% for key in srcColumnsPK -%}([{{columns[loop.index0].name}}] is not null){{-' AND ' if not loop.last -}}{% endfor -%}
            ) P
          UNPIVOT (bkValue FOR bkColumnName IN ({% for key in srcColumnsPK -%}[{{columns[loop.index0].name}}]{{-', ' if not loop.last -}}{% endfor -%})) as unP)
        SELECT 
          systemKey = Types.[systemKey],
          domainKey = @domainKey,
          mkColumnName = @mkColumnName,
          bkColumnName = Types.bkColumnName,
          -- PK = convert(nvarchar(100), Types.PK),
          bkValue = convert(varchar(100), NULL),
          bkDisplayValue = convert(nvarchar(150), NULL),
          bkInt = convert(bigint, CASE WHEN Types.dataType = 'int' THEN Types.bkValue ELSE NULL END),
          bkString = convert(nvarchar(100), CASE WHEN Types.dataType = 'string' THEN Types.bkValue ELSE NULL END),
          bkDate = convert(date, CASE WHEN Types.dataType = 'date' THEN Types.bkValue ELSE NULL END),
          bkTime = convert(time, CASE WHEN Types.dataType = 'time' THEN Types.bkValue ELSE NULL END),
          bkDateTime = convert(datetime, CASE WHEN Types.dataType = 'datetime' THEN Types.bkValue ELSE NULL END),
          bkHash = convert(varchar(40), Types.bkHash)
        FROM Types

        EXEC mk.spAllocate @sessionNo, @packageName, @domainCode, @version, @dependencyList, 'delta', @systemCode, @mkColumnName

        EXEC reference.printLine 'Create #stage'
        -- Create temp source table with foreign key(s)
        IF OBJECT_ID('tempdb..#stage') IS NOT NULL DROP TABLE #stage
        CREATE TABLE #stage WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
        SELECT 
          [{{mkColumnName}}] = ISNULL(MasterKeys.[mkValue],-1),
          {% for key in srcColumns -%}
          [{{columns[loop.index0].name}}] = src.[{{key.name}}],
          {%- for pk in srcColumnsPK -%}{%- if pk.name===key.name %} -- PK {%- endif -%}{%- endfor %} 
          {% endfor -%}
          dwHash = CONVERT(CHAR(40), hashBytes('SHA2_256', CONVERT(NVARCHAR(MAX), 
            concat_ws(@separator, {% for key in srcColumns -%}src.[{{key.name}}]{{-', ' if not loop.last -}}{% endfor -%}))), 2)
        FROM {% if query %}(
          {{query | indent(10)}}) src
          {%- else -%}[{{srcSchemaName}}].[{{srcTableName}}] AS src
          {%- endif %}
        JOIN (SELECT DISTINCT bkHash, mkValue
          FROM mk.businessKey bKey
          JOIN mk.masterKey mKey ON bKey.mkId = mKey.mkId
          WHERE mKey.mkColumnName = @mkColumnName AND mKey.domainKey = @domainKey
        ) MasterKeys 
        ON MasterKeys.bkHash = CONVERT(CHAR(40), hashBytes('SHA2_256', CONVERT(NVARCHAR(MAX), concat_ws(@separator, 
            src.[systemCode], {% for key in srcColumnsPK -%}src.[{{columns[loop.index0].name}}]{{-', ' if not loop.last -}}{% endfor -%}
            ))), 2)
        
        IF (@sinkObjectCode != @objectCode) BEGIN
          SET @message = concat('Restore initial state on [', @dwHistoryDate, '] into [{{schemaName}}].[{{tableName}}]')
          EXEC reference.printLine @message
          IF OBJECT_ID('tempdb..#current') IS NOT NULL DROP TABLE #current
          CREATE TABLE #current WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
          SELECT 
            [{{mkColumnName}}] = sink.[{{mkColumnName}}],
            {% for key in columns -%}
            [{{key.name}}] = sink.[{{key.name}}],
            {% endfor -%}
            dwSessionNo = sink.dwSessionNo,
            dwPackageName = sink.dwPackageName,
            dwStartDate = sink.dwStartDate,
            dwUpdateDate = sink.dwUpdateDate,
            dwHash = sink.dwHash,
            dwVersion = sink.dwVersion
          FROM [{{schemaName}}].[{{tableName}}History] sink
          WHERE dateAdd(s, -1, cast(@dwHistoryDate as datetime)) between sink.dwStartDate and sink.dwEndDate 
          UNION
          SELECT 
            [{{mkColumnName}}] = sink.[{{mkColumnName}}],
            {% for key in columns -%}
            [{{key.name}}] = sink.[{{key.name}}],
            {% endfor -%}
            dwSessionNo = sink.dwSessionNo,
            dwPackageName = sink.dwPackageName,
            dwStartDate = sink.dwStartDate,
            dwUpdateDate = sink.dwUpdateDate,
            dwHash = sink.dwHash,
            dwVersion = sink.dwVersion
          FROM [{{schemaName}}].[{{tableName}}] sink
          WHERE sink.dwStartDate <= dateAdd(s, -1, cast(@dwHistoryDate as datetime))

          DELETE FROM [{{schemaName}}].[{{tableName}}]
          SET @message = concat('Delete all history after [', @dwHistoryDate, '] from [{{schemaName}}].[{{tableName}}History]')
          EXEC reference.printLine @message
          DELETE FROM [{{schemaName}}].[{{tableName}}History] WHERE dwEndDate >= dateAdd(s, -1, cast(@dwHistoryDate as datetime))
          UPDATE [{{schemaName}}].[{{tableName}}History] 
          SET dwIsLastVersion = 1 
          FROM #current cur
          WHERE [{{schemaName}}].[{{tableName}}History].[{{mkColumnName}}] = cur.[{{mkColumnName}}] 
            AND [{{schemaName}}].[{{tableName}}History].dwVersion = isNull(cur.dwVersion, 0) - 1

          INSERT INTO [{{schemaName}}].[{{tableName}}] (
            [{{mkColumnName}}], {% for key in columns -%}[{{key.name}}],{% endfor -%}
            dwSessionNo, dwPackageName, dwStartDate, dwVersion, dwUpdateDate, dwHash
          )
          SELECT [{{mkColumnName}}], {% for key in columns -%}[{{key.name}}],{% endfor -%}
            dwSessionNo, dwPackageName, dwStartDate, dwVersion, dwUpdateDate, dwHash
          FROM #current
        END

        EXEC reference.printLine 'Create #upsert'
        -- Create temp table to update existing and add new records
        IF OBJECT_ID('tempdb..#upsert') IS NOT NULL DROP TABLE #upsert
        CREATE TABLE #upsert WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
        SELECT 
          [{{skColumnName}}] = sink.[{{skColumnName}}],
          [{{mkColumnName}}] = stg.[{{mkColumnName}}],
          {% for key in columns -%}
          [{{key.name}}] = stg.[{{key.name}}],
          {% endfor -%}
          dwRowChangeType = CASE 
            WHEN sink.[{{mkColumnName}}] IS NULL THEN 'New' 
            WHEN sink.dwHash != stg.dwHash THEN 'Update' 
            ELSE 'Skip' END,
          dwHash = stg.dwHash,
          dwLastVersion = sink.dwVersion
        FROM #stage stg 
        LEFT JOIN [{{schemaName}}].[{{tableName}}] sink ON sink.[{{mkColumnName}}] = stg.[{{mkColumnName}}]

        IF (@loadType = 'full') 
        BEGIN
          EXEC reference.printLine 'Full Load: Insert into [{{schemaName}}].[{{tableName}}History] deleted rows'
          -- load new records
          INSERT INTO #upsert (
            [{{skColumnName}}], [{{mkColumnName}}], {% for key in columns -%}[{{key.name}}],{% endfor %}
            dwRowChangeType, dwHash, dwLastVersion 
            )
          SELECT
            [{{skColumnName}}] = sink.[{{skColumnName}}],
            [{{mkColumnName}}] = sink.[{{mkColumnName}}],
            {% for key in columns -%}
            [{{key.name}}] = sink.[{{key.name}}],
            {% endfor -%}
            dwRowChangeType = 'Delete',
            dwHash = sink.dwHash,
            dwLastVersion = sink.dwVersion
          FROM [{{schemaName}}].[{{tableName}}] sink 
          LEFT JOIN [{{schemaName}}].[{{tableName}}History] sinkH ON sink.[{{mkColumnName}}] = sinkH.[{{mkColumnName}}] AND sinkH.dwIsLastVersion = 1
          WHERE NOT EXISTS (SELECT 1 FROM #stage src WHERE src.[{{mkColumnName}}] = sink.[{{mkColumnName}}])
          AND sink.[{{skColumnName}}] != -1 
        END          

        EXEC reference.printLine 'Update [{{schemaName}}].[{{tableName}}History] dwLastVersion'
        UPDATE [{{schemaName}}].[{{tableName}}History] 
        SET dwIsLastVersion = 0
        FROM #upsert src WHERE [{{schemaName}}].[{{tableName}}History].[{{mkColumnName}}] = src.[{{mkColumnName}}]
        AND src.dwRowChangeType in ('Update', 'Delete') AND [{{schemaName}}].[{{tableName}}History].dwIsLastVersion = 1

        EXEC reference.printLine 'Insert into [{{schemaName}}].[{{tableName}}History]'
        -- load new records
        INSERT INTO [{{schemaName}}].[{{tableName}}History] ( 
          [{{mkColumnName}}], {% for key in columns -%}[{{key.name}}],{% endfor %} 
          dwSessionNo, dwPackageName, dwIsLastVersion, dwIsDeleted, 
          dwStartDate, dwEndDate, dwVersion, dwUpdateDate, dwHash)
        SELECT
          [{{mkColumnName}}] = cur.[{{mkColumnName}}],
          {% for key in columns -%}
          [{{key.name}}] = cur.[{{key.name}}],
          {% endfor -%}
          dwSessionNo = cur.dwSessionNo,
          dwPackageName = cur.dwPackageName,
          dwIsLastVersion = 1,
          dwIsDeleted = CASE WHEN dwRowChangeType = 'Delete' THEN 1 ELSE 0 END,
          dwStartDate = cur.dwStartDate,
          dwEndDate = dateAdd(s, -1, cast(@dwHistoryDate as datetime)),
          dwVersion = isNull(src.dwLastVersion, 1),
          dwUpdateDate = @now,
          dwHash = cur.dwHash
        FROM [{{schemaName}}].[{{tableName}}] cur JOIN #upsert src ON cur.[{{mkColumnName}}] = src.[{{mkColumnName}}]
        WHERE dwRowChangeType in ('Update', 'Delete')

        EXEC reference.printLine 'Insert [{{schemaName}}].[{{tableName}}]'
        -- load new records
        INSERT INTO [{{schemaName}}].[{{tableName}}] ( 
          [{{mkColumnName}}], {% for key in columns -%}[{{key.name}}],{% endfor %} 
          dwSessionNo, dwPackageName, dwStartDate, dwVersion, dwUpdateDate, dwHash
          )
        SELECT
          [{{mkColumnName}}] = src.[{{mkColumnName}}],
          {% for key in columns -%}
          [{{key.name}}] = src.[{{key.name}}],
          {% endfor -%}
          dwSessionNo = @sessionNo,
          dwPackageName = @packageName,
          -- dwIsDeleted = 0,
          dwStartDate = CASE 
            -- #note: dwStartDate can base on src.<startDate>
            WHEN src.dwLastVersion IS NULL AND @loadType = 'Initial' THEN @dwInitialDate 
            ELSE @dwHistoryDate END,
          -- dwEndDate = @dwEndDate,
          dwVersion = isNull(src.dwLastVersion, 0) + 1,
          dwUpdateDate = @now,
          dwHash = src.dwHash
        FROM #upsert src
        WHERE dwRowChangeType in ('New', 'Update')

        EXEC reference.printLine 'Delete updated and deleted rows from [{{schemaName}}].[{{tableName}}]'
        DELETE FROM [{{schemaName}}].[{{tableName}}] 
        WHERE [{{mkColumnName}}] in (SELECT [{{mkColumnName}}] FROM #upsert WHERE dwRowChangeType in ('Update', 'Delete'))
        AND dwUpdateDate != @now

        -- ************ Actual Data UnitTests **************** 
        EXEC reference.printLine '-- Run Actual Data UnitTests'
        DECLARE @checkTotalQuantity varchar(250)
        DECLARE @checkQuantityKey varchar(250)
        DECLARE @checkQuantityPK varchar(250)
        DECLARE @checkQuantityLimit varchar(250)
        DECLARE @checkNullPK varchar(250)
        DECLARE @expectCountMin bigInt, @expectCountMax bigInt
        EXEC etl.getRowLimit @objectCode, @expectCountMin OUT, @expectCountMax OUT
        ;WITH 
            Expect as (SELECT expectCount = count(*) FROM #stage),
            Actual as (SELECT 
                actualCount = SUM(CASE WHEN [{{skColumnName}}] = -1 THEN 0 ELSE 1 END),
                actualCountKey = SUM(CASE WHEN [{{skColumnName}}] = -1 THEN 1 ELSE 0 END),
                actualCountPK = COUNT(DISTINCT CASE
                    WHEN [{{skColumnName}}] = -1 THEN NULL
                    ELSE CONCAT_WS(@separator, sink.[{{mkColumnName}}], '' ) END),
                actualNullPK = SUM( CASE WHEN (sink.[{{mkColumnName}}] is null ) THEN 1 ELSE 0 END )
                FROM [{{schemaName}}].[{{tableName}}] sink INNER JOIN #stage src ON sink.[{{mkColumnName}}] = src.[{{mkColumnName}}])
        SELECT 
            @checkTotalQuantity = test.assertEqualsInt('checkTotalQuantity (source row quantity = destination)', expectCount, actualCount),
            @checkQuantityKey = test.assertEqualsInt('checkQuantityKey (destination dimKey = 1)', 1, actualCountKey),
            @checkQuantityPK = test.assertEqualsInt('checkQuantityPK (source row quantity = destination PK)', expectCount, actualCountPK),
            @checkQuantityLimit = test.assertTrue(CONCAT('checkQuantityLimit (between ', @expectCountMin, ' - ', @expectCountMax, ' rows)'), 
                CASE WHEN actualCount BETWEEN @expectCountMin and @expectCountMax THEN 'TRUE' ELSE 'FALSE' END),
            @checkNullPK = test.assertEqualsInt('checkNullPK (PK has NULL values)', 0, actualNullPK),
            @rowsRead = expectCount, @rowsWritten = actualCount
        FROM Actual CROSS JOIN Expect

        -- Info
        PRINT @checkTotalQuantity
        PRINT @checkQuantityKey
        PRINT @checkQuantityPK
        PRINT @checkQuantityLimit
        
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkTotalQuantity
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkQuantityKey
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkQuantityPK
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkQuantityLimit

        -- Raise Errors
        IF (@checkTotalQuantity like 'TEST FAILED%') RAISERROR (@checkTotalQuantity, 16, 1)
        IF (@checkQuantityPK like 'TEST FAILED%') RAISERROR (@checkQuantityPK, 16, 1)
        IF (@checkQuantityLimit like 'TEST FAILED%') RAISERROR (@checkQuantityLimit, 16, 1)
        IF (@checkNullPK like 'TEST FAILED%') RAISERROR (@checkNullPK, 16, 1)
        
        
        -- ************ History Data UnitTests ****************
        EXEC reference.printLine '-- Run History Data UnitTests'        
        DECLARE @checkCurrentFlag varchar(250)
        DECLARE @checkStartDate varchar(250)
        DECLARE @checkDeletedRows varchar(250)
        DECLARE @checkCardinality varchar(250)

        ;WITH 
        S as (SELECT keyId = concat('H',[{{skColumnName}}]), id = CONCAT_WS(@separator, [{{mkColumnName}}], '' ), 
          dwStartDate, dwEndDate, dwIsCurrent = 0
          FROM [{{schemaName}}].[{{tableName}}History] UNION
          SELECT keyId = concat('C',[{{skColumnName}}]), id = CONCAT_WS(@separator, [{{mkColumnName}}], '' ), 
          dwStartDate, dwEndDate = @dwEndDate, dwIsCurrent = 1
          FROM [{{schemaName}}].[{{tableName}}]),
        DatePeriod as (
          SELECT fromDate = min(dwStartDate), toDate = max(dwStartDate), totalRows = count(*)
          FROM s WHERE keyId != -1
          ),
        TESTS AS (
          SELECT curS.id, 
              chk_currentFlag = CASE WHEN ISNULL(chkCurFlag.cnt_currentFlag, 0) > 1 THEN 1 ELSE 0 END,
              cnt_deleted_rows = CASE WHEN (chkCurFlag.cnt_currentFlag = 0 AND cnt_currentPeriod = 0) THEN 1 ELSE 0 END, 
              chk_start_date = CASE WHEN ISNULL( DATEADD(s, 1, prevS.dwEndDate), curS.dwStartDate) = curS.dwStartDate THEN 0 ELSE 1 END
          FROM S curS 
          LEFT JOIN S prevS 
              ON prevS.id = curS.id AND (dateAdd(s, -1, curS.dwStartDate) BETWEEN prevS.dwStartDate AND prevS.dwEndDate)
          LEFT JOIN (SELECT id, 
              SUM(dwIsCurrent) cnt_currentFlag,
              SUM(CASE WHEN (@dwHistoryDate BETWEEN dwStartDate AND dwEndDate) THEN 1 ELSE 0 END) cnt_currentPeriod
              FROM S GROUP BY id) chkCurFlag 
              ON curS.id = chkCurFlag.id 
          ),
        Cardinality as (
          SELECT chk_cardinality = coalesce(SUM(countRows),0) FROM (
            SELECT d.DateAlternateKey, s.id, COUNT(*) as countRows
            FROM s 
            JOIN reference.Date d ON d.dateAlternateKey between dateAdd(day, -3, @dwHistoryDate) AND @dwHistoryDate
            AND d.dateAlternateKey between s.dwStartDate and s.dwEndDate
            GROUP BY d.DateAlternateKey, s.id
            HAVING COUNT(*)>1 
          ) AA
        )
        -- DEBUG: select all failed records
        -- SELECT * FROM TESTS WHERE chk_currentFlag != 0 OR cnt_deleted_rows != 0 OR chk_start_date != 0     
        SELECT 
            @checkCurrentFlag = test.assertEqualsInt('checkCurrentFlag (0/1 rows per each PK)', 0, sum(chk_currentFlag)),
            @checkStartDate = test.assertEqualsInt('checkStartDate (previous end date = current start date)', 0, sum(chk_start_date)),
            @checkDeletedRows = test.assertEqualsInt('checkDeletedRows (count all history lines)', 0, sum(cnt_deleted_rows)),
            @checkCardinality = test.assertEqualsInt('checkCardinality (unique PK per each date)', 0, sum(Cardinality.chk_cardinality))
        FROM TESTS CROSS JOIN Cardinality

        -- Info
        PRINT @checkCurrentFlag
        PRINT @checkStartDate
        
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkCurrentFlag
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkStartDate
        
        -- Warnings
        SET @checkDeletedRows = REPLACE( @checkDeletedRows, 'TEST FAILED', 'WARNING!')
        SET @checkCardinality = REPLACE( @checkCardinality, 'TEST FAILED', 'WARNING!')
        PRINT @checkDeletedRows
        PRINT @checkCardinality
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkDeletedRows
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkCardinality

        -- Raise Errors
        IF (@checkCurrentFlag like 'TEST FAILED%') RAISERROR (@checkCurrentFlag, 16, 1)
        IF (@checkStartDate like 'TEST FAILED%') RAISERROR (@checkStartDate, 16, 1)
    
    
        -- ************ ETL code ends here ****************                

        SET @sessionStatus = 'Succeeded'
        SET @message = etl.setLogMessage('MasterData', 'Transformation complete', REPLACE(REPLACE('"output":{"rowsRead":{0}, "rowsWritten":{1}}','{0}', @rowsRead),'{1}', @rowsWritten), @sessionStatus)
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message

        -- change object status to @sessionStatus
        EXEC [etl].[setSessionStatus] @sessionNo, @packageName, @objectCode, @status = @sessionStatus, @countRows = @rowsWritten
    END 
    ELSE BEGIN -- else skip this step
        SET @message = etl.setLogMessage('MasterData', 'Skip this step', NULL, @sessionStatus)
        EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message
    END
END TRY
BEGIN CATCH
    -- change object status to 'Failed'
    SET @sessionStatus = 'Failed'
    SET @message = reference.setLogMessage('MasterData', 'Execution failed', 
                reference.setErrorMessage( ERROR_NUMBER(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_MESSAGE() ),
                @sessionStatus)
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message

    EXEC [etl].[setSessionStatus] @sessionNo, @packageName, @objectCode, @status = @sessionStatus, @countRows = NULL
    RAISERROR (@message, 16, 1)
END CATCH

{%- set schemaName = p.meta.destination.schemaName -%}
{%- set tableName = p.meta.destination.tableName -%}
{%- set columns = p.meta.destination.columns -%}
{%- set columnsPK = p.meta.destination.columnsPK -%}
{%- set columnsAll = p.meta.destination.columnsAll -%}
{%- set srcSchemaName = p.meta.source.table.schemaName -%}
{%- set srcTableName = p.meta.source.table.tableName -%}
{%- set query = p.meta.source.query -%}
{%- set srcTables = p.meta.source.sourceTables -%}
{%- set srcColumns = p.meta.source.columns -%}
{%- set srcColumnsPK = p.meta.source.columnsPK -%}
{%- set objectName = p.meta.object.name -%}
{%- set spSchema = p.meta.object.spSchema -%}
{%- set spName = p.meta.object.spName -%}
{%- set integers = ['int', 'integer', 'bigint', 'smallint', 'tinyint'] -%}
{%- set numbers = ['numeric', 'decimal'] -%}
{%- set floatNumbers = ['float', 'real'] -%}
{%- set strings = ['varchar', 'nvarchar', 'char', 'nchar'] -%}
{%- set dates = ['date'] -%}
{%- set times = ['time'] -%}
{%- set datetimes = ['datetime'] -%}
{%- set largeObjects = ['varchar', 'nvarchar', 'varbinary'] -%}
{%- set skColumnName = p.meta.object.name+'SK' -%}
IF SCHEMA_ID('{{spSchema}}') IS NULL EXEC ('CREATE SCHEMA {{spSchema}}')
GO

IF OBJECT_ID ('[{{spSchema}}].[{{spName}}]', 'P') IS NOT NULL DROP PROCEDURE [{{spSchema}}].[{{spName}}];
GO

CREATE PROCEDURE [{{spSchema}}].[{{spName}}]
    @sessionNo varchar(50),
    @packageName varchar(100),
    @loadType varchar(50),
    @dwHistoryDate datetime
AS
-- ********** Project: {{ p.settings.projectName }} **********
-- Git FileName: {{ p.template.outputFileName }}
-- Source:      {%if query%}SQL query{%- else -%}[{{srcSchemaName}}].[{{srcTableName}}]{%- endif%} 
-- Destination: [{{schemaName}}].[{{tableName}}] domain reference table (SCD2) without MK
--
-- Execution sample:
-- EXEC [{{spSchema}}].[{{spName}}] 'adminSession', 'ETL', NULL, NULL
-- 
-- Author: {{ p.settings.author }}
-- Created: {{ p.template.createdAt | dateFormat('YYYY-MM-DD hh:mm:ss a') }}
-- Modified: {{ p.settings.authorInitials }} {{ p.template.createdAt | dateFormat('YYYY-MM-DD hh:mm:ss a') }}
-- 
-- HISTORY:
-- PR     	Date      	By	Comments
-- ----   	----------	---	---------------------------------------------------------
--
SET NOCOUNT ON;
DECLARE @rowsRead INT, @rowsWritten INT
DECLARE @message varchar(1000)
DECLARE @sessionStatus varchar(50)

DECLARE @domainCode varchar(50) = '{{spSchema}}' -- define domain name in LOWER CASE
DECLARE @systemCode varchar(10) = 'ALL' -- define what system source/ALL used in this sproc
DECLARE @objectCode varchar(250) = '{{schemaName}}.{{tableName}}' -- define destination object code 
DECLARE @procName varchar(250)   = '{{schemaName}}.sp{{tableName}}' -- current proc name - OBJECT_NAME(@@PROCID) is not yet supported

DECLARE @now datetime = getUtcDate()
DECLARE @nowNZ datetime = reference.getLocalDate(@now, 'NZ')
SET @dwHistoryDate = isNull(@dwHistoryDate, @now)

-- read domain settings
DECLARE @settings nvarchar(max) = reference.getDomainParams(@domainCode, @now, @sessionNo, @objectCode)
SET @loadType = CASE
  WHEN OBJECT_ID('[{{schemaName}}].[{{tableName}}]', 'U') IS NULL THEN 'Initial'
  ELSE isNull(@loadType, JSON_VALUE(@settings, '$.loadType'))
  END
SET @settings = JSON_MODIFY(@settings, '$.loadType', @loadType)

DECLARE @dwInitialDate datetime = CAST(JSON_VALUE(@settings, '$.dwInitialDate') as datetime)
DECLARE @dwEndDate datetime = CAST(JSON_VALUE(@settings, '$.dwEndDate') as datetime)
DECLARE @dwCurrentDate datetime = CAST(JSON_VALUE(@settings, '$.dwCurrentDate') as datetime)
DECLARE @separator nvarchar(2) = JSON_VALUE(@settings, '$.separator')
DECLARE @version nvarchar(10) = JSON_VALUE(@settings, '$.version')
PRINT @settings
EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @settings

PRINT replicate('-', 20) + ' EXECUTE [' + @procName + '] ' + replicate('-', 20)
EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, 'Start Execution'

-- add all manual dependencies here
DECLARE @dependencyList varchar(1000) = NULL 
{% if srcTables %}
{%- for srcTable in srcTables -%}
-- EXEC [etl].[addDependency] @sessionNo, @packageName, @srcObjectCode = '{{srcTable.schemaName}}.{{srcTable.tableName}}', @destObjectCode = @objectCode
{% endfor -%}
{%- else -%}
-- EXEC [etl].[addDependency] @sessionNo, @packageName, @srcObjectCode = '{{srcSchemaName}}.{{srcTableName}}', @destObjectCode = @objectCode
{%- endif %}
-- always check for session status AFTER adding new dependencies
EXEC [etl].[checkSessionStatus] @sessionNo, @packageName, @objectCode, @sessionStatus OUT

IF @sessionStatus in ('Ready', 'Failed') BEGIN 
  EXEC [etl].[setSessionStatus] @sessionNo, @packageName, @objectCode, @status = 'Running', @countRows = NULL
  BEGIN TRY
    -- ************ ETL code starts here ***************
    IF OBJECT_ID('[{{schemaName}}].[{{tableName}}]', 'U') IS NULL
    BEGIN
      EXEC reference.printLine '-- Create table [{{schemaName}}].[{{tableName}}]'
      CREATE TABLE [{{schemaName}}].[{{tableName}}] (
        [{{skColumnName}}] [bigint] IDENTITY(1,1) NOT NULL,
        {%- for key in columns %}
        [{{key.name}}] {% if key.dataType in floatNumbers -%} [numeric] {%- else -%} [{{key.dataType}}] {%- endif %}
        {%- if key.dataType in strings and key.characterMaximumLength > 0 -%} ({{-key.characterMaximumLength-}})
        {%- elif key.dataType in largeObjects and (not key.characterMaximumLength or key.characterMaximumLength == -1) -%} (max)
        {%- elif key.dataType in numbers and key.numericPrecision > 0 and key.numericScale > 0 -%} ({{key.numericPrecision}},{{key.numericScale-}})
        {%- elif key.dataType in floatNumbers -%} (20,4)
        {%- endif %} {{ "NULL" if key.isNullable else "NOT NULL"-}},
        {%- for pk in columnsPK -%}{%- if pk.name===key.name %} -- PK {%- endif -%}{%- endfor -%} 
        {% endfor %}
        dwSessionNo [varchar](50) NOT NULL,
        dwPackageName [varchar](100) NOT NULL,
        dwIsDeleted [bit] NOT NULL,
        dwStartDate [datetime] NOT NULL,
        dwEndDate [datetime] NOT NULL,
        dwIsCurrent [bit] NOT NULL,
        dwVersion [int] NOT NULL,
        dwUpdateDate [datetime] NOT NULL,
        dwHash [varchar](40) NOT NULL
      ) WITH ( DISTRIBUTION = ROUND_ROBIN, HEAP)
    END

    IF (SELECT count(*) FROM [{{schemaName}}].[{{tableName}}] WHERE [{{skColumnName}}] = -1) = 0
    BEGIN 
      EXEC reference.printLine '-- Insert default -1 "Unknown" row'
      SET IDENTITY_INSERT [{{schemaName}}].[{{tableName}}] ON;
      INSERT INTO [{{schemaName}}].[{{tableName}}] ( 
        [{{skColumnName}}],
        {% for key in columns -%}[{{key.name}}], {% if (loop.index % 4) === 0 or loop.lasts %}
        {% endif -%}{%- endfor %}
        dwSessionNo, dwPackageName, dwIsDeleted, dwIsCurrent, 
        dwStartDate, dwEndDate, dwVersion, dwUpdateDate, dwHash )
      SELECT 
        [{{skColumnName}}] = -1,
        {%- for key in columns %} 
        [{{key.name}}] = 
        {%- if (key.dataType in integers ) %} -1, 
          {%- elif (key.dataType in strings and key.characterMaximumLength<7) %} 'U', 
          {%- elif (key.dataType in strings and key.characterMaximumLength>=7) %} 'UNKNOWN', 
          {%- elif (key.dataType in largeObjects) %} null, 
          {%- else %} null, {%- endif %}
        {%- endfor %}
        dwSessionNo = @sessionNo,
        dwPackageName = @packageName,
        dwIsDeleted = 'FALSE',
        dwIsCurrent = 'TRUE',
        dwStartDate = @dwInitialDate,
        dwEndDate = @dwEndDate,
        dwVersion = 1,
        dwUpdateDate = @now,
        dwHash = ''
      SET IDENTITY_INSERT [{{schemaName}}].[{{tableName}}] OFF
    END

    {% if query %}
    EXEC reference.printLine '-- Create #src'
    IF OBJECT_ID('tempdb..#src') IS NOT NULL DROP TABLE #src
    CREATE TABLE #src WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
    {{query | safe | indent(4) }}
    {%- endif %}

    EXEC reference.printLine '-- Create #stage'
    -- Create temp source table with foreign key(s)
    IF OBJECT_ID('tempdb..#stage') IS NOT NULL DROP TABLE #stage
    CREATE TABLE #stage WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
    SELECT 
      {% for key in srcColumns -%}
      [{{key.name}}] = 
        {%- if key.dataType in floatNumbers %} cast(src.[{{key.name}}] as numeric(20,4)), -- {{key.dataType}}
        {%- else %} src.[{{key.name}}],
        {%- endif -%}
      {%- for pk in srcColumnsPK -%}{%- if pk.name===key.name %} -- PK {%- endif -%}{%- endfor %} 
      {% endfor -%}
      dwHash = convert(char(40), hashBytes('SHA2_256', convert(nvarchar(max), 
        concat_ws(@separator, {%- for key in srcColumns -%}
            {%- if key.dataType in dates %}convert(nvarchar(100), src.[{{key.name}}], 23)
            {%- elif key.dataType in times %}convert(nvarchar(100), src.[{{key.name}}], 114)
            {%- elif key.dataType in datetimes %}convert(nvarchar(100), src.[{{key.name}}], 121)
            {%- elif key.dataType in floatNumbers %}convert(numeric(20,4), src.[{{key.name}}])
            {%- else %}src.[{{key.name}}]
            {%- endif -%}{{-', ' if not loop.last -}} {% if (loop.index % 3) === 0 or loop.last %}
            {%- endif -%}
            {%- endfor -%}, ''))), 2)  
    FROM {% if not query %}[{{srcSchemaName}}].[{{srcTableName}}]{% else %}#src{% endif %} src
    
    EXEC reference.printLine '-- Create #upsert'
    -- Create temp table to update existing and add new records
    IF OBJECT_ID('tempdb..#upsert') IS NOT NULL DROP TABLE #upsert
    CREATE TABLE #upsert WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
    SELECT DISTINCT
      [{{skColumnName}}] = sink.[{{skColumnName}}],
      {% for key in columns -%}
      [{{key.name}}] = stg.[{{key.name}}],
      {% endfor -%}
      dwRowChangeType = CASE 
        WHEN sink.[{{skColumnName}}] IS NULL THEN 'New' 
        WHEN sink.dwHash != stg.dwHash THEN 'Update' 
        ELSE 'Skip' END,
      dwHash = stg.dwHash,
      dwLastVersion = isNull(sink.dwVersion, lastVer.dwLastVersion)
    FROM #stage stg 
    LEFT JOIN [{{schemaName}}].[{{tableName}}] sink 
    ON {% for pk in srcColumnsPK -%}sink.[{{pk.name}}] = stg.[{{pk.name}}] 
      {%- if not loop.last %} AND {% endif -%}{% endfor %} 
    AND @dwHistoryDate between sink.dwStartDate and sink.dwEndDate 
    LEFT JOIN ( -- get last version for deleted row to keep sequence order if the record appears again
      SELECT {% for pk in srcColumnsPK -%}[{{pk.name}}], {% endfor %}
        dwLastVersion = max(dwVersion)
      FROM [{{schemaName}}].[{{tableName}}] ver
      WHERE dwEndDate < @dwHistoryDate
        AND dwIsDeleted = 'TRUE'
      GROUP BY {% for pk in srcColumnsPK -%}[{{pk.name}}]{%- if not loop.last %}, {% endif -%}{% endfor %}
      ) lastVer ON {% for pk in srcColumnsPK -%}stg.[{{pk.name}}] = lastVer.[{{pk.name}}] 
      {%- if not loop.last %} AND {% endif -%}{% endfor %}

    IF (@loadType = 'full') 
    BEGIN
      EXEC reference.printLine '-- Full Load: set dwIsDeleted flag for deleted rows'
      -- load new records
      INSERT INTO #upsert (
        [{{skColumnName}}], 
        {% for key in columns -%}[{{key.name}}], {% if (loop.index % 3) === 0 or loop.lasts %}
        {% endif -%}{%- endfor %}
        dwRowChangeType, dwHash, dwLastVersion 
        )
      SELECT DISTINCT
        [{{skColumnName}}] = sink.[{{skColumnName}}],
        {% for key in columns -%}
        [{{key.name}}] = sink.[{{key.name}}],
        {% endfor -%}
        dwRowChangeType = 'Delete',
        dwHash = sink.dwHash,
        dwLastVersion = sink.dwVersion
      FROM [{{schemaName}}].[{{tableName}}] sink
      WHERE NOT EXISTS (
          SELECT 1 FROM #stage src WHERE {% for pk in srcColumnsPK -%}sink.[{{pk.name}}] = src.[{{pk.name}}] 
          {%- if not loop.last %} AND {% endif -%}{%- endfor %}
        )
        AND dateAdd(s, -1, @dwHistoryDate) between sink.dwStartDate and sink.dwEndDate 
        AND sink.[{{skColumnName}}] != -1
    END          

    -- Restore dataset on selected previous date
    IF @dwHistoryDate != @now BEGIN
      SET @message = concat('-- Restore dataset state on [', @dwHistoryDate, '] into #current')
      EXEC reference.printLine @message
      IF OBJECT_ID('tempdb..#current') IS NOT NULL DROP TABLE #current
      CREATE TABLE #current WITH (DISTRIBUTION = ROUND_ROBIN, HEAP) AS 
      SELECT 
        [{{skColumnName}}] = sink.[{{skColumnName}}],
        {% for key in columns -%}
        [{{key.name}}] = sink.[{{key.name}}],
        {% endfor -%}
        dwSessionNo = sink.dwSessionNo,
        dwPackageName = sink.dwPackageName,
        dwIsDeleted = sink.dwIsDeleted,
        dwStartDate = sink.dwStartDate,
        dwVersion = sink.dwVersion,
        dwUpdateDate = sink.dwUpdateDate,
        dwHash = sink.dwHash
      FROM [{{schemaName}}].[{{tableName}}] sink
      WHERE dateAdd(s, -1, @dwHistoryDate) between sink.dwStartDate and sink.dwEndDate 

      IF @@trancount = 0 BEGIN TRANSACTION
      SET @message = concat('-- Delete all history after [', @dwHistoryDate, '] from [{{schemaName}}].[{{tableName}}]')
      EXEC reference.printLine @message
      
      DELETE FROM [{{schemaName}}].[{{tableName}}] 
      WHERE dwStartDate >= @dwHistoryDate
        AND [{{skColumnName}}] != -1

      UPDATE [{{schemaName}}].[{{tableName}}] 
      SET 
        dwIsCurrent = 'TRUE',
        dwEndDate = @dwEndDate
      FROM #current cur
      WHERE [{{schemaName}}].[{{tableName}}].[{{skColumnName}}] = cur.[{{skColumnName}}] 
        AND [{{schemaName}}].[{{tableName}}].dwEndDate >= @dwHistoryDate
    END

    IF @@trancount = 0 BEGIN TRANSACTION
    EXEC reference.printLine '-- Modify [{{schemaName}}].[{{tableName}}] updated and deleted rows'
    UPDATE [{{schemaName}}].[{{tableName}}] 
    SET 
      dwIsCurrent = 'FALSE',
      dwIsDeleted = CASE WHEN src.dwRowChangeType = 'Delete' THEN 'TRUE' ELSE 'FALSE' END,
      dwEndDate = dateAdd(s, -1, @dwHistoryDate)
    FROM #upsert src 
    WHERE {% for pk in srcColumnsPK -%}[{{schemaName}}].[{{tableName}}].[{{pk.name}}] = src.[{{pk.name}}] 
      {%- if not loop.last %} AND {% endif -%}{%- endfor %}
      AND src.dwRowChangeType in ('Update', 'Delete') 
      AND [{{schemaName}}].[{{tableName}}].dwIsCurrent = 'TRUE'

    EXEC reference.printLine '-- Insert into [{{schemaName}}].[{{tableName}}]'
    -- load new records
    INSERT INTO [{{schemaName}}].[{{tableName}}] ( 
      {% for key in columns -%}[{{key.name}}], {% if (loop.index % 3) === 0 or loop.last %}
      {% endif -%}{%- endfor %} 
      dwSessionNo, dwPackageName, dwIsDeleted, dwStartDate, dwEndDate, 
      dwIsCurrent, dwVersion, dwUpdateDate, dwHash
      )
    SELECT
      {% for key in columns -%}
      [{{key.name}}] = src.[{{key.name}}],
      {% endfor -%}
      dwSessionNo = @sessionNo,
      dwPackageName = @packageName,
      dwIsDeleted = 'FALSE',
      dwStartDate = CASE 
        -- #note: dwStartDate can base on src.<startDate>
        WHEN src.dwLastVersion IS NULL AND @loadType = 'Initial' THEN @dwInitialDate 
        ELSE @dwHistoryDate END,
      dwEndDate = @dwEndDate,
      dwIsCurrent = 'TRUE',
      dwVersion = isNull(src.dwLastVersion, 0) + 1,
      dwUpdateDate = @now,
      dwHash = src.dwHash
    FROM #upsert src
    WHERE src.dwRowChangeType in ('New', 'Update')

    WHILE @@trancount>0 AND @sessionNo like '%testSession' COMMIT TRANSACTION

    -- ************ Actual Data UnitTests **************** 
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, 'Start UnitTests'
    DECLARE @expectCountMin bigInt, @expectCountMax bigInt
    EXEC etl.getRowLimit @objectCode, @expectCountMin OUT, @expectCountMax OUT
    SET @expectCountMin = CASE WHEN @loadType = 'Delta' THEN 0 ELSE @expectCountMin END
    SET @expectCountMax = CASE WHEN @loadType in ('Full', 'Initial') THEN 100000000 ELSE @expectCountMax END
    EXEC reference.printLine '-- Run Actual Data UnitTests'
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, 'Run Actual Data UnitTests'

    DECLARE @expectCount bigInt = (SELECT count(1) FROM #stage)
    DECLARE @actualCount bigInt, @actualCountKey bigInt, @actualCountPK bigInt, @actualNullPK bigInt
    SELECT 
      @actualCount = isNull(SUM(CASE WHEN sink.[{{skColumnName}}] = -1 THEN 0 ELSE 1 END),0),
      @actualCountKey = isNull(SUM(CASE WHEN sink.[{{skColumnName}}] = -1 THEN 1 ELSE 0 END),0),
      @actualCountPK = COUNT(DISTINCT CASE
        WHEN sink.[{{skColumnName}}] = -1 THEN NULL
        ELSE concat_ws(@separator, {%- for key in columnsPK -%}
          {%- if key.dataType in dates %} convert(nvarchar(100), sink.[{{key.name}}], 23)
          {%- elif key.dataType in times %} convert(nvarchar(100), sink.[{{key.name}}], 114)
          {%- elif key.dataType in datetimes %} convert(nvarchar(100), sink.[{{key.name}}], 121)
          {%- elif key.dataType in floatNumbers %} convert(numeric(20,4), sink.[{{key.name}}])
          {%- else %} sink.[{{key.name}}]
          {%- endif -%}{{-', ' if not loop.last -}} {% if (loop.index % 3) === 0 or loop.last %}
          {%- endif -%}
          {%- endfor -%}, '') END),   
      @actualNullPK = isNull(SUM(CASE WHEN {% for key in columnsPK -%}(sink.[{{key.name}}] is null){{-' OR ' if not loop.last -}}{%- endfor %} THEN 1 ELSE 0 END ), 0)
    FROM [{{schemaName}}].[{{tableName}}] sink 
    LEFT JOIN #stage src ON {% for key in columnsPK -%}sink.[{{key.name}}] = src.[{{key.name}}]{{-' AND ' if not loop.last -}}{%- endfor %}
    WHERE (src.[{{columnsPK[0].name}}] IS NOT NULL OR sink.[{{skColumnName}}] = -1)
      AND sink.dwIsCurrent = 'TRUE'

    DECLARE @checkTotalQuantity nvarchar(max) = test.assertEquals('checkTotalQuantity (source row quantity = destination)', @expectCount, @actualCount)
    DECLARE @checkQuantityKey nvarchar(max) = test.assertEquals('checkQuantityKey (Key -1)', 1, @actualCountKey)
    DECLARE @checkQuantityPK nvarchar(max) = test.assertEquals('checkQuantityPK (source row quantity = destination PK)', @expectCount, @actualCountPK)
    DECLARE @checkQuantityLimit nvarchar(max) = test.assertTrue(concat('checkQuantityLimit (between ', @expectCountMin, ' - ', @expectCountMax, ' rows)'), 
          CASE WHEN @actualCount BETWEEN @expectCountMin and @expectCountMax THEN 'TRUE' ELSE 'FALSE' END)
    DECLARE @checkNullPK nvarchar(max) = test.assertEquals('checkNullPK (PK has NULL values)', 0, @actualNullPK)
    SET @rowsRead = @expectCount
    SET @rowsWritten = @actualCount

    -- Info
    PRINT @checkTotalQuantity
    PRINT @checkQuantityKey
    PRINT @checkQuantityPK
    PRINT @checkQuantityLimit
    
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkTotalQuantity
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkQuantityKey
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkQuantityPK
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkQuantityLimit

    -- Raise Errors
    WHILE @@trancount>0 AND @sessionNo = 'testSession' COMMIT TRANSACTION
    IF (@checkTotalQuantity like '%TEST FAILED%') RAISERROR (@checkTotalQuantity, 16, 1)
    IF (@checkQuantityPK like '%TEST FAILED%') RAISERROR (@checkQuantityPK, 16, 1)
    IF (@checkQuantityLimit like '%TEST FAILED%') RAISERROR (@checkQuantityLimit, 16, 1)
    IF (@checkNullPK like '%TEST FAILED%') RAISERROR (@checkNullPK, 16, 1)
    
    
    -- ************ History Data UnitTests ****************
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, 'Run History Unit Tests'
    EXEC reference.printLine '-- Run History Data UnitTests'        
    DECLARE @checkCurrentFlag nvarchar(max)
    DECLARE @checkStartDate nvarchar(max)
    DECLARE @checkVersion nvarchar(max)
    DECLARE @checkDeletedRows nvarchar(max)
    DECLARE @checkCardinality nvarchar(max)

    ;WITH 
    S as (
      SELECT keyId = [{{skColumnName}}], id = concat_ws(@separator, {%- for key in columnsPK -%}
        {%- if key.dataType in dates %} convert(nvarchar(100), [{{key.name}}], 23)
        {%- elif key.dataType in times %} convert(nvarchar(100), [{{key.name}}], 114)
        {%- elif key.dataType in datetimes %} convert(nvarchar(100), [{{key.name}}], 121)
        {%- elif key.dataType in floatNumbers %} convert(numeric(20,4), [{{key.name}}])
        {%- else %} [{{key.name}}]
        {%- endif -%}{{-', ' if not loop.last -}} {% if (loop.index % 3) === 0 or loop.last %}
        {%- endif -%}
        {%- endfor -%}, ''), 
      dwStartDate, dwEndDate, dwIsCurrent = cast(dwIsCurrent as int),
      cntVersion = count(1) over (partition by {% for key in columnsPK -%}
          [{{key.name}}], {% endfor %}dwVersion)
      FROM [{{schemaName}}].[{{tableName}}]),
    DatePeriod as (
      SELECT fromDate = min(dwStartDate), toDate = max(dwStartDate), totalRows = count(*)
      FROM s WHERE keyId != -1
      ),
    TESTS AS (
      SELECT curS.id, 
          chk_currentFlag = CASE WHEN ISNULL(chkCurFlag.cnt_currentFlag, 0) > 1 THEN 1 ELSE 0 END,
          cnt_deleted_rows = CASE WHEN (chkCurFlag.cnt_currentFlag = 0 AND cnt_currentPeriod = 0) THEN 1 ELSE 0 END, 
          chk_start_date = CASE WHEN ISNULL(dateAdd(s, 1, prevS.dwEndDate), curS.dwStartDate) = curS.dwStartDate THEN 0 ELSE 1 END,
          chk_version = CASE WHEN ISNULL(curS.cntVersion, 1) != 1 THEN 1 ELSE 0 END
      FROM S curS 
      LEFT JOIN S prevS 
          ON prevS.id = curS.id AND (dateAdd(s, -1, curS.dwStartDate) BETWEEN prevS.dwStartDate AND prevS.dwEndDate)
      LEFT JOIN (SELECT id, 
          SUM(dwIsCurrent) cnt_currentFlag,
          SUM(CASE WHEN (@dwHistoryDate BETWEEN dwStartDate AND dwEndDate) THEN 1 ELSE 0 END) cnt_currentPeriod
          FROM S GROUP BY id) chkCurFlag 
          ON curS.id = chkCurFlag.id 
      ),
    Cardinality as (
      SELECT chk_cardinality = coalesce(SUM(countRows),0) FROM (
        SELECT d.DateAlternateKey, s.id, COUNT(*) as countRows
        FROM s 
        JOIN reference.Date d ON d.dateAlternateKey between dateAdd(day, -3, @dwHistoryDate) AND @dwHistoryDate
        AND d.dateAlternateKey between s.dwStartDate and s.dwEndDate
        GROUP BY d.DateAlternateKey, s.id
        HAVING COUNT(*)>1 
      ) AA
    )
    -- DEBUG: select all failed records
    -- SELECT * FROM TESTS WHERE chk_currentFlag != 0 OR cnt_deleted_rows != 0 OR chk_start_date != 0     
    SELECT 
        @checkCurrentFlag = test.assertEquals('checkCurrentFlag (0/1 rows per each PK)', 0, sum(chk_currentFlag)),
        @checkStartDate = test.assertEquals('checkStartDate (previous end date = current start date)', 0, sum(chk_start_date)),
        @checkVersion = test.assertEquals('checkVersion (unique)', 0, sum(chk_version)),
        @checkDeletedRows = test.assertEquals('checkDeletedRows (count all history lines)', 0, sum(cnt_deleted_rows)),
        @checkCardinality = test.assertEquals('checkCardinality (unique PK per each date)', 0, sum(Cardinality.chk_cardinality))
    FROM TESTS CROSS JOIN Cardinality

    -- Info
    PRINT @checkCurrentFlag
    PRINT @checkStartDate
    PRINT @checkVersion
    
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkCurrentFlag
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkStartDate
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkVersion
    
    -- Warnings
    SET @checkDeletedRows = REPLACE( @checkDeletedRows, 'TEST FAILED', 'WARNING!')
    SET @checkCardinality = REPLACE( @checkCardinality, 'TEST FAILED', 'WARNING!')
    PRINT @checkDeletedRows
    PRINT @checkCardinality
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkDeletedRows
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @checkCardinality

    -- Raise Errors
    WHILE @@trancount>0 AND @sessionNo = 'testSession' COMMIT TRANSACTION
    IF (@checkCurrentFlag like '%TEST FAILED%') RAISERROR (@checkCurrentFlag, 16, 1)
    IF (@checkStartDate like '%TEST FAILED%') RAISERROR (@checkStartDate, 16, 1)
    IF (@checkVersion like '%TEST FAILED%') RAISERROR (@checkVersion, 16, 1)

    -- ************ ETL code ends here ****************                

    SET @sessionStatus = 'Succeeded'
    SET @message = etl.setLogMessage('MasterData', 'Transformation complete', REPLACE(REPLACE('"output":{"rowsRead":{0}, "rowsWritten":{1}}','{0}', @rowsRead),'{1}', @rowsWritten), @sessionStatus)
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message

    -- change object status to @sessionStatus
    EXEC [etl].[setSessionStatus] @sessionNo, @packageName, @objectCode, @status = @sessionStatus, @countRows = @rowsWritten
    
    WHILE @@trancount > 0 COMMIT TRANSACTION
    UPDATE STATISTICS [{{schemaName}}].[{{tableName}}]
  END TRY
  BEGIN CATCH
    WHILE @@trancount > 0 ROLLBACK TRANSACTION
    
    -- change object status to 'Failed'
    SET @sessionStatus = 'Failed'
    SET @message = reference.setLogMessage('MasterData', 'Execution failed', 
                reference.setErrorMessage( ERROR_NUMBER(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_MESSAGE() ),
                @sessionStatus)
    EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message

    EXEC [etl].[setSessionStatus] @sessionNo, @packageName, @objectCode, @status = @sessionStatus, @countRows = NULL
    RAISERROR (@message, 16, 1)
  END CATCH
END 
ELSE BEGIN -- else skip this step
  SET @message = etl.setLogMessage('MasterData', 'Skip this step', NULL, @sessionStatus)
  EXEC [etl].[addSessionLog] @sessionNo, @packageName, @objectCode, @procName, @message
END